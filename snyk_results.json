{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "python/RunWithDebugTrue",
              "name": "RunWithDebugTrue",
              "shortDescription": {
                "text": "Debug Mode Enabled"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nWhen debugging, it may be necessary to report detailed information to a developer. However, if the debugging code is not disabled when the application is operating in a production environment, then this sensitive information may be exposed to attackers.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "RunWithDebugTrue",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/youtify/youtify/commit/a3e91bcf71f2fca4e167bc86d15a2adb4a5323c1?diff=split#diff-0fa9312f4a91eb730539f65a0974930d40238ad957764ff0d987c31e9b698875L-1",
                    "lines": [
                      {
                        "line": "import webapp2\n",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "from google.appengine.ext.webapp import template\n",
                        "lineNumber": 2,
                        "lineChange": "none"
                      },
                      {
                        "line": "from google.appengine.ext.webapp import util\n",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "class MinimizerHandler(webapp2.RequestHandler):\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get(self):\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "        path = os.path.join(os.path.dirname(__file__), 'html', 'minimizer.html')\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.response.headers['Content-Type'] = 'text/html; charset=utf-8';\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.response.out.write(template.render(path, {\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }))\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "app = webapp2.WSGIApplication([\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ('/.*', MinimizerHandler),\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ], debug=True)\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    ], debug=False)\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/derolf/transcoder/commit/21126e722f6a36963f3ee0a00a85502e9b7a5646?diff=split#diff-5dd2ce715c71935cc12e2b05af1a76efbb5f720fa99d70328b36fb2b9460864cL-1",
                    "lines": [
                      {
                        "line": "from flask import Flask, request, Response, abort, send_file, jsonify\n",
                        "lineNumber": 0,
                        "lineChange": "none"
                      },
                      {
                        "line": "from awake import wol\n",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "import os, subprocess, re\n",
                        "lineNumber": 2,
                        "lineChange": "none"
                      },
                      {
                        "line": "import config as C\n",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "import library as L\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "import web\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "import restlibrary\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "app = Flask(__name__)\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "restlibrary.init( app )\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "web.init( app )\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.run( host=\"0.0.0.0\",port=C.port, threaded=True, debug=True )\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "app.run( host=\"0.0.0.0\",port=C.port, threaded=True, debug=False )\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/datacenter/acitoolkit/commit/f0f9b2cd94b8692c3c15eee3954781f0e0bb0587?diff=split#diff-49a9b8eb9a3986d165fea2b6e1d0c47801ca6fef3700465221e43dde511863c7L-1",
                    "lines": [
                      {
                        "line": "app.run(debug=True, host=args.ip, port=int(args.port))\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "app.run(debug=False, host=args.ip, port=int(args.port))\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 30,
                "cwe": [
                  "CWE-489"
                ]
              }
            },
            {
              "id": "python/XSS",
              "name": "XSS",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "XSS",
                  "Security",
                  "SourceServer",
                  "SourceWebForm",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/internetarchive/trough/commit/39445228c5c960ffb70edc90e033f2bf8308ebff?diff=split#diff-7bd4a46dc91e071b34a6cde24d75d9d53e29c1b86f0256494397d6ee850b4875L-1",
                    "lines": [
                      {
                        "line": "from flask import Flask, request\n",
                        "lineNumber": 2,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from flask import Flask, request, Response\n",
                        "lineNumber": 2,
                        "lineChange": "added"
                      },
                      {
                        "line": "import logging\n",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "import ujson\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "def make_app(controller):\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "    controller.check_config()\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "    app = Flask(__name__)\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @app.route('/', methods=['POST'])\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def simple_provision_writable_segment():\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ''' deprecated api '''\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "        segment_id = request.get_data(as_text=True)\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "        logging.info('provisioning writable segment %r', segment_id)\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "        result_dict = controller.provision_writable_segment(segment_id)\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return result_dict.get('write_url')\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        return Response(result_dict.get('write_url'), mimetype='text/plain')\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/invinst/CPDB/commit/7f6aa9174dc458590f4a7d2ecd6abb4c8260529a?diff=split#diff-36ee8ee71da1a00b36ef32b0bd750b003f3297af169a220c000e8034b5e8ff3dL-1",
                    "lines": [
                      {
                        "line": "return HttpResponse(JSONSerializer().serialize({\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "return JsonResponse(\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "    data={\n",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "        'investigator': investigator,\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'allegations': allegations,\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    'has_map': has_map\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}))\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        'allegations': details['allegations'],\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "        'timeline': details['timeline'],\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "        'has_map': details['has_map']\n",
                        "lineNumber": 21,
                        "lineChange": "added"
                      },
                      {
                        "line": "    },\n",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "    safe=False\n",
                        "lineNumber": 23,
                        "lineChange": "added"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 24,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/disoul/dotapick/commit/9af2d0c2c993c9893e1ded55869a0bdf8daf682f?diff=split#diff-c967b1b8020ddb28b0d48b996d98e3d959e49e2f50be7f3b2c5ae787ada96d8fL-1",
                    "lines": [
                      {
                        "line": "return suggestheros.GetSuggestedHeros()\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "return jsonify({'hero': suggestheros.GetSuggestedHeros()})\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 72,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "python/Sqli",
              "name": "Sqli",
              "shortDescription": {
                "text": "SQL Injection"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nIn an SQL injection attack, the user can submit an SQL query directly to the database, gaining access without providing appropriate credentials. Attackers can then view, export, modify, and delete confidential information; change passwords and other authentication information; and possibly gain access to other systems within the network. This is one of the most commonly exploited categories of vulnerability, but can largely be avoided through good coding practices.\n\n## Best practices for prevention\n* Avoid passing user-entered parameters directly to the SQL server.\n* Avoid using string concatenation to build SQL queries from user-entered parameters.\n* When coding, define SQL code first, then pass in parameters. Use prepared statements with parameterized queries. Examples include `SqlCommand()` in .NET and `bindParam()` in PHP.\n* Use strong typing for all parameters so unexpected user data will be rejected.\n* Where direct user input cannot be avoided for performance reasons, validate input against a very strict allowlist of permitted characters, avoiding special characters such as `? & / < > ; - ' \" \\` and spaces. Use a vendor-supplied escaping routine if possible.\n* Develop your application in an environment and/or using libraries that provide protection against SQL injection.\n* Harden your entire environment around a least-privilege model, ideally with isolated accounts with privileges only for particular tasks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "Sqli",
                  "Security",
                  "SourceServer",
                  "SourceWebForm",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/nttdots/go-dots/commit/38d1493d11c3a764136c953237233fd16a3e3dc9?diff=split#diff-c7737ee0a3441787e4bcee78bd8ab548aa068c1d16a2632ecf141d9f405d0105L-1",
                    "lines": [
                      {
                        "line": "cur.execute(\"select type, capacity from blocker where id=%d\" % i)\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "cur.execute(\"select type, capacity from blocker where id=%s\", (i,))\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/StorminStanley/st2incubator/commit/0b4500580e10365fa7f4fe8b2e96dbba2bd329bf?diff=split#diff-31d8468daa423d5561ecde70355d49ec9e205612ac5e39aa59516dbcbcf37e4aL-1",
                    "lines": [
                      {
                        "line": "email = MySQLdb.escape_string(email)\n",
                        "lineNumber": 100,
                        "lineChange": "added"
                      },
                      {
                        "line": "c = self.db.cursor()\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "query = 'SELECT * FROM user_registration WHERE email=\"%s\"' % email\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "try:\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "    c.execute(query)\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/stopstalk/stopstalk-deployment/commit/e378c37e6a401dc430bf52dce1be8760b9bf9a25?diff=split#diff-c69db29661e495522c99940fe7c8bab30c8a0ccc3fc10ef92b6aa066f14d592fL-1",
                    "lines": [
                      {
                        "line": "    iutable = db.institute_user\n",
                        "lineNumber": 408,
                        "lineChange": "added"
                      },
                      {
                        "line": "    query = (atable.institute == record.institute) & \\\n",
                        "lineNumber": 409,
                        "lineChange": "none"
                      },
                      {
                        "line": "            (atable.email != record.email) & \\\n",
                        "lineNumber": 410,
                        "lineChange": "none"
                      },
                      {
                        "line": "            (atable.institute != \"Other\") & \\\n",
                        "lineNumber": 411,
                        "lineChange": "none"
                      },
                      {
                        "line": "            (atable.blacklisted == False) & \\\n",
                        "lineNumber": 412,
                        "lineChange": "none"
                      },
                      {
                        "line": "            (atable.registration_key == \"\")\n",
                        "lineNumber": 413,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 414,
                        "lineChange": "none"
                      },
                      {
                        "line": "    rows = db(query).select(atable.id)\n",
                        "lineNumber": 415,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if len(rows):\n",
                        "lineNumber": 416,
                        "lineChange": "none"
                      },
                      {
                        "line": "        query_values = \",\".join([str((int(x.id), int(record.id))) for x in rows]).replace(\" \", \"\")\n",
                        "lineNumber": 416,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        db.executesql(\"INSERT INTO institute_user(send_to_id,user_registered_id) VALUES %s;\" % query_values)\n",
                        "lineNumber": 417,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        for row in rows:\n",
                        "lineNumber": 417,
                        "lineChange": "added"
                      },
                      {
                        "line": "            iutable.insert(send_to_id=row.id,\n",
                        "lineNumber": 418,
                        "lineChange": "added"
                      },
                      {
                        "line": "                           user_registered_id=record.id)\n",
                        "lineNumber": 419,
                        "lineChange": "added"
                      },
                      {
                        "line": "            db.commit()\n",
                        "lineNumber": 420,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 64,
                "cwe": [
                  "CWE-89"
                ]
              }
            },
            {
              "id": "python/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "PT",
                  "Security",
                  "SourceServer",
                  "SourceHttpBody",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Guad/fuwa/commit/955baf1c0e8824f08a96e48a350ee3cd0e3c5493?diff=split#diff-568470d013cd12e4f388206520da39ab9a4e4c3c6b95846cbc281abc1ba3c959L-1",
                    "lines": [
                      {
                        "line": "import string, random\n",
                        "lineNumber": 1,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import string, random, hashlib, os\n",
                        "lineNumber": 1,
                        "lineChange": "added"
                      },
                      {
                        "line": "from werkzeug import secure_filename\n",
                        "lineNumber": 2,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "#Load config file\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "config = {}\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "with open('config.ini', 'r') as file:\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tfor line in file.read().splitlines():\n",
                        "lineNumber": 7,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tline = line.split('==')\n",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tconfig[line[0]] = line[1]\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "app = flask.Flask(__name__) #Initialize our application\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.config['MAX_CONTENT_LENGTH'] = 10 * 1024 * 1024 #Set the upload limit to 10MiB\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "def genHash(seed): #Generate five letter filenames for our files\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    base = string.ascii_lowercase+string.digits \n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "    random.seed(seed)\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "    hash_value = \"\"\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for i in range(5):\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "        hash_value += random.choice(base)\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return hash_value\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "@app.route('/', methods=['GET', 'POST'])\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "def index():\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif flask.request.method == 'POST':\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\"\"\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tFile upload happens here.\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tWe get your filename and convert it to our hash with your extension.\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tThen we redirect to the file itself.\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\"\"\"\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tf = flask.request.files['file']\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\textension = f.filename.split('.')[-1]\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tfilename = genHash(f.filename) + '.' + extension\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tf.save('static/files/%s' % filename)\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tprint 'Uploaded file \\'%s\\'' % filename #Log what file was uploaded\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn flask.redirect(flask.url_for('getFile', filename=filename))\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\n",
                        "lineNumber": 33,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\thasher = hashlib.md5() \t\t\n",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tbuf = f.read()\t\t   \t\t\n",
                        "lineNumber": 35,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tf.seek(0) #Set cursor back to position 0 so we can read it again in the save function.\n",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t\t\t\t\t\t# We hash the file to get its filename.\t   \t\t\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t\t\t\t\t\t# So that we can upload two different images with the same filename,\n",
                        "lineNumber": 38,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\thasher.update(buf)\t   \t\t# But not two same images with different filenames.\n",
                        "lineNumber": 39,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tdirname = genHash(hasher.hexdigest())\n",
                        "lineNumber": 40,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tif not os.path.exists(\"static/files/%s\" % dirname): # Check if the folder already exists\n",
                        "lineNumber": 41,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tos.mkdir('static/files/%s' % dirname) #Make it\n",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tf.save('static/files/%s/%s' % (dirname, secure_filename(f.filename)))\n",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tprint 'Uploaded file \\'%s\\'' % secure_filename(f.filename) #Log what file was uploaded\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\treturn flask.redirect(flask.url_for('getFile', dirname=dirname,filename=secure_filename(f.filename)))\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\telse:\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tflask.flash('File already exists in %s!' % dirname) #Display a message for the user.\n",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\treturn flask.redirect(flask.url_for('index'))\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fonttools/fonttools/commit/0b99c8968e04e2e36c6c46ad8bb1a550d25969b4?diff=split#diff-e8b6161353c7ce5b13e62df1da329a85de0ef80ce8f039d283c25bf892b2b600L-1",
                    "lines": [
                      {
                        "line": "os.system('gzip -9v %s' % tar)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "os.rename(gz, tgz)\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "if destdir:\n",
                        "lineNumber": 33,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tprint \"destination directory:\", destdir\n",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tos.system('mv %s %s' % (gz, destdir))\n",
                        "lineNumber": 35,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Chenwe-i-lin/KnowledgeFruits/commit/?diff=split#diff-ab8c675e5b4b07c550455b0884835f1df471bb69ad7142f6ad43b26cf33eb4e6L-1",
                    "lines": [
                      {
                        "line": "base_path = os.path.abspath(os.path.dirname(__file__))\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "base_path_for_data =  os.path.join(base_path,'data/texture')\n",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "file = os.path.join(base_path_for_data, image + '.png')\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "if os.path.abspath(file).startswith(base_path_for_data):\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "with open(os.getcwd() + \"/data/texture/\" + image + '.png', \"rb\") as f:\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 36,
                "cwe": [
                  "CWE-23"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "python/RunWithDebugTrue",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Running the application in debug mode (debug flag is set to True in run) is a security risk if the application is accessible by untrusted parties.",
            "markdown": "Running the application in debug mode (debug flag is set to {0} in {1}) is a security risk if the application is accessible by untrusted parties.",
            "arguments": [
              "[True](0)",
              "[run](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69,
                  "startColumn": 5,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fc70726cabc819d4229394eb12c9021988efdb3f9d7a691a34ab3ca2e4bcd199",
            "1": "ad31a887.4aaa6e0b.671b1085.139c59a8.1d07cee4.57d888ee.fa793294.ebed174f.b1a8a79f.976f7a3f.671b1085.08fb6340.828d6b14.7eee6d6e.fa793294.baf4e289"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 19,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 5,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 570,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/XSS",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a web form flows into the return value of login, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[a web form](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[the return value of login](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32,
                  "startColumn": 20,
                  "endColumn": 43
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8d86894a31f2d921cf7ae073d2c38c19655c360a7cf1718d5e0b4b5ebacf0b25",
            "1": "8a30cfc6.ab5d79e8.2683ade8.79c7ea5e.1d07cee4.f6eef252.0a7337bb.b60afa86.ffbe3a25.ab5d79e8.13aa4cd9.66baf00a.89a7456e.a5d7f69f.22a8b49e.91057b05"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 20,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 20,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 20,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 9,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 26,
                            "startColumn": 58,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 32,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 20,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 20,
                            "endColumn": 43
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 840,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/XSS",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into the return value of greet, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4)",
              "[the return value of greet](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48,
                  "startColumn": 12,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "480b107b658bbb8da90e80f127cf0a008b809350ddaced38d466e532123ef9b6",
            "1": "8a30cfc6.9dc2f629.79e62dc9.98569367.4d053a7b.01046d07.0a7337bb.1d19bf80.0bb9dd7b.9dc2f629.13aa4cd9.66baf00a.cb2ee61d.05a1d16e.22a8b49e.1d19bf80"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 12,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 12,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 5,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 26,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 12,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 12,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 840,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Sqli",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a web form flows into execute, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",
            "arguments": [
              "[a web form](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[execute](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 27,
                  "startColumn": 9,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6e33fbf8a151e369828ec7ca1723eee3387be631186b948fb78b08bf63a5a0f6",
            "1": "26f1400e.ecc4e7fd.79e62dc9.7369b21f.1d07cee4.ba14daf2.75d4ed92.a52f12f1.a6b41d6e.cae4cd67.933e57f0.7369b21f.89a7456e.a5d7f69f.0f7ffa0d.91057b05"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 20,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 20,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 20,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 9,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 26,
                            "startColumn": 58,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 26,
                            "startColumn": 17,
                            "endColumn": 97
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 26,
                            "startColumn": 9,
                            "endColumn": 97
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 19,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 9,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 820,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the HTTP request body flows into save, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[the HTTP request body](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[save](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "startColumn": 9,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0653ba49442fadee99b7f46e01778b0cbae4f22690b2b584cbf872d6a771ace2",
            "1": "e34e1fea.67df6de4.b19066ef.139c59a8.2b5d65ea.addfbd48.081ac3f4.c0e75779.aae8f0ff.d65c0e39.da4aa1aa.dad8a914.1d07cee4.5d90e2b5.9bfded97.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 16,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 16,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 16,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 9,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 20,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 20,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 9,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 43,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 19,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 9,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 820,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "Python",
            "files": 4,
            "type": "SUPPORTED"
          },
          {
            "isSupported": false,
            "lang": "Python",
            "files": 1,
            "type": "FAILED_PARSING"
          }
        ]
      }
    }
  ]
}
