name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  test-and-scan:
    runs-on: ubuntu-latest

    steps:
      # 1. GitHub에서 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Node.js 설치 (Snyk CLI 설치를 위해)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      # 3. Snyk CLI 설치
      - name: Install Snyk CLI
        run: |
          npm install -g snyk
          snyk --version

      # 4. Python 환경 설정
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      # 5. 필요한 Python 패키지 설치
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 6. Snyk를 이용하여 코드 스캔 및 수정
      - name: Run Snyk Code Scan and Fix
        run: |
          snyk code test --json > snyk_results.json --debug || echo "Snyk scan found vulnerabilities but proceeding..."
          snyk code test --json > snyk_results.json --json-file-output=snyk_results.json
          snyk code fix --file=app.py
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # 7. 수정된 app.py가 존재하는지 확인
      - name: Check if app.py was modified
        id: check_fixed_code
        run: |
          if git diff --name-only | grep -q "app.py"; then
            echo "app_py_modified=true" >> $GITHUB_ENV
          else
            echo "app_py_modified=false" >> $GITHUB_ENV
            echo "No modifications were made to app.py."
          fi
        continue-on-error: true

      # 8. 수정된 app.py가 있을 경우 커밋하고 푸시
      - name: Commit and Push modified app.py
        if: env.app_py_modified == 'true'
        run: |
          git config --local user.email "kkamagui.0@gmail.com"
          git config --local user.name "KKamgui-0"
          git add app.py
          git commit -m "Auto-fixed vulnerabilities in app.py"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/KKamagui-0/Project_Joleeus.git HEAD:master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 9. 수정된 app.py가 있을 경우 람다 함수 호출하여 SNS 알림 발송
      - name: Prepare Payload for Lambda
        run: python prepare_payload.py

      - name: Trigger Lambda for SNS Notification
        if: env.app_py_modified == 'true'
        run: |
          aws lambda invoke --function-name Vulnerability_Discovered --payload fileb://payload.json response.json
          cat response.json
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "ap-northeast-2"

  deploy:
    runs-on: ubuntu-latest
    needs: test-and-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS Elastic Beanstalk CLI
        run: |
          pip install awsebcli

      # Elastic Beanstalk 초기화
      - name: Initialize Elastic Beanstalk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "ap-northeast-2"
        run: |
          eb init -p python-3.11 joleeus-env --region ap-northeast-2

      # Elastic Beanstalk 환경 상태 확인 및 생성
      - name: Check if Elastic Beanstalk Environment Exists
        id: check_env
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "ap-northeast-2"
        run: |
          if eb status joleeus-env; then
            echo "env_exists=true" >> $GITHUB_ENV
          else
            echo "env_exists=false" >> $GITHUB_ENV
          fi

      - name: Create Elastic Beanstalk Environment if Not Found
        if: env.env_exists == 'false'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "ap-northeast-2"
        run: |
          eb create joleeus-env --region ap-northeast-2 --platform "python-3.11" --single

      - name: Use Elastic Beanstalk Environment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "ap-northeast-2"
        run: |
          eb use joleeus-env

      # Elastic Beanstalk에 코드 배포
      - name: Deploy to Elastic Beanstalk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "ap-northeast-2"
        run: |
          eb deploy
