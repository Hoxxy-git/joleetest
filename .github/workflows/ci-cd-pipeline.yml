name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  test-and-scan:
    runs-on: ubuntu-latest

    steps:
      # 1. Git H ub에서 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Node.js 설치 (Snyk CLI 설치를 위해)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      # 3. Snyk CLI 설치
      - name: Install Snyk CLI
        run: |
          npm install -g snyk
          snyk --version

      # 4. Python 환경 설정
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      # 5. 필요한 Python 패키지 설치
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 6. Snyk를 이용하여 코드 스캔
      - name: Run Snyk Code Scan
        id: snyk_scan
        run: snyk code test --json > snyk_results.json || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # 7. 수정되지 않은 취약점 확인 및 알 림 (남아있는 취약점이 있으면 배포 중단)
      - name: Check for remaining vulnerabilities and notify
        run: |
          if grep -q "vulnerabilities" snyk_results.json; then
            echo "Remaining vulnerabilities detected."
            python notify_unresolved_vulnerabilities.py  # 알림을 보내는 스크립트
            echo "취약점 확인을 위해 종료"
            exit 1  # 배포 중단을 위해 스크립트 종료
          else
            echo "No remaining vulnerabilities."
          fi
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "ap-northeast-2"
          SNS_TOPIC_ARN: ${{ secrets.SNS_TOPIC_ARN }}

  deploy:
    runs-on: ubuntu-latest
    needs: test-and-scan
    if: success()  # 취약점이 없을 때만 배포
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS Elastic Beanstalk CLI
        run: |
          pip install awsebcli

      - name: Initialize Elastic Beanstalk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "ap-northeast-2"
        run: |
          eb init -p python-3.11 joleeus-env --region ap-northeast-2

      - name: Check if environment exists
        id: check_env
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "ap-northeast-2"
        run: |
          if eb list | grep -q joleeus-env; then
            echo "Environment exists."
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "Environment does not exist."
            echo "exists=false" >> $GITHUB_ENV
          fi

      - name: Create Elastic Beanstalk environment
        if: env.exists == 'false'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "ap-northeast-2"
        run: |
          eb create joleeus-env --region ap-northeast-2

      - name: Deploy to Elastic Beanstalk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "ap-northeast-2"
        run: |
          eb deploy
