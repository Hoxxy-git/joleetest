name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  test-and-scan:
    runs-on: ubuntu-latest

    steps:
      # 1. GitHub에서 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Node.js 설치 (Snyk CLI 설치를 위해)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      # 3. Snyk CLI 설치
      - name: Install Snyk CLI
        run: |
          npm install -g snyk
          snyk --version

      # 4. Python 환경 설정
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      # 5. 필요한 Python 패키지 설치
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 6. Snyk를 이용하여 코드 스캔
      - name: Run Snyk Code Scan
        id: snyk_scan
        run: snyk code test --json > snyk_results.json || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # 7. 자동으로 수정 가능한 취약점 수정
      - name: Fix vulnerabilities with Snyk
        run: |
          snyk code fix --file=app.py --json > snyk_fix_results.json || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # 8. 수정된 파일이 있는지 확인하고 커밋 및 푸시
      - name: Commit and Push fixed code
        run: |
          if git diff --quiet app.py; then
            echo "No automatic fixes were applied."
          else
            git config --local user.email "kkamagui.0@gmail.com"
            git config --local user.name "kkamagui-0"
            git add app.py
            git commit -m "Auto-fixed vulnerabilities in app.py"
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/KKamagui-0/Project_Joleeus.git HEAD:master
            echo "수정되었습니다"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 9. snyk_fix_results.json 파일 확인
      - name: Display snyk_fix_results.json
        run: cat snyk_fix_results.json

      # 10. 자동으로 수정되지 않은 취약점 확인 및 알림 (남아있는 취약점이 있으면 배포 중단)
      - name: Check for remaining vulnerabilities and notify
        run: |
          if grep -q "vulnerabilities" snyk_results.json; then
            echo "Remaining vulnerabilities detected."
            python notify_unresolved_vulnerabilities.py
            echo "취약점 확인을 위해 종료"
            exit 1  # 배포 중단을 위해 스크립트 종료
          else
            echo "No remaining vulnerabilities."
          fi
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "ap-northeast-2"
          SNS_TOPIC_ARN: ${{ secrets.SNS_TOPIC_ARN }}

  deploy:
    runs-on: ubuntu-latest
    needs: test-and-scan  # 이 조건이 여전히 유효함
    if: success()  # 조건을 단순화하여 일단 배포 진행 여부를 확인
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS Elastic Beanstalk CLI
        run: |
          pip install awsebcli

      - name: Initialize Elastic Beanstalk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "ap-northeast-2"
        run: |
          eb init -p python-3.11 joleeus-env --region ap-northeast-2

      - name: Deploy to Elastic Beanstalk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "ap-northeast-2"
        run: |
          eb deploy
